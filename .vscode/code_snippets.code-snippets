{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"import": {
		"prefix": "i",
		"body": [
			"import ${2:element} from 'react'",
		],
		"description": "import"
	},
	"console-log": {
		"prefix": "c",
		"body": [
			"console.log(${2:element})",
		],
		"description": "console.log"
	}
	,
	"arrow-function": {
		"prefix": "a",
		"body": [
			"${2:element} = () => {",
			"\t$0",
      "}"
		],
		"description": "arrow function"
	},
	"return": {
		"prefix": "re",
		"body": [
			"return ${2:element}",
		],
		"description": "return"
	},
	"render": {
		"prefix": "r",
		"body": [
			"render() {",
				"return (",
				"\t$0",
			")",
			"}"
		],
		"description": "return"
	},
	"export": {
		"prefix": "e",
		"body": [
			"export default ${2:element}",
		],
		"description": "export"
	},
	"R": {
		"prefix": "R",
		"body": [
			"import React from 'react'",
		],
		"description": "react"
	},
	"RC": {
		"prefix": "RC",
		"body": [
			"import React, { Component } from 'react'",
		],
		"description": "react, component"
	},
	"Class component": {
		"prefix": "CC",
		"body": [
			"class ${2:element} extends Component {",
			"\t$0",
			"}"
		],
		"description": "Class component"
	},
	"functional component": {
		"prefix": "FC",
		"body": [
			"const ${2:element} = () => {",
		"\t$0",
		"}"
	],
	"description": "functional component"
},
}
